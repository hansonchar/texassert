% \iffalse
%
% Copyright 2024 Hanson Char
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%
%   <https://www.latex-project.org/lppl.txt>
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{texassert.dtx}
%</driver>
%
%<pkg>\ProvidesPackage{texassert}
%<*pkg>
  [2024/11/07 v0.0.2 texassert]
%</pkg>
%
%<*driver>
\documentclass{ltxdoc}
%^^A You should always \usepackage your style file. If you don’t, Doc won’t
%^^A see the package’s \ProvidesPackage line and won’t know how to set
%^^A \filedate and \fileversion.
\usepackage{\jobname}
^^A \OnlyDescription ^^A Nothing after the \MaybeStop will be output
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\SetupDoc{reportchangedates}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \changes{v0.0.1}{2024-11-05}{Initial version}
% \changes{v0.0.2}{2024-11-07}{Migrate~source~files to~\texttt{\jobname.dtx}}
%^^A The \fileversion and \filedate comes from the \ProvidesPakage above.
% \GetFileInfo{\jobname.dtx}
% \title{The \textsf{\jobname} package\thanks{This document
%   corresponds to \textsf{\jobname}~\fileversion,
%   dated~\filedate.}}
% \author{Hanson Char \\  \texttt{hanson.char@gmail.com}}
% \maketitle
%
% \begin{abstract}
% An assertion library for unit testing in plain TeX.
% \end{abstract}
%
%^^A \tableofcontents
%
% \section{Introduction}
%
% This package emerged from a desire to explore |l3build| and literate programming.
% It provides a collection of Plain \TeX\ macros that I originally used for unit testing,
% now converted into a |.dtx| file, allowing for regeneration of the original source files
% from the literate code.\par
% \medskip\noindent
% All |.tex| files in this package are written in Plain TeX, offering a simple mechanism
% for performing assertions in unit testing Plain \TeX\ macros. I hope you find it useful.
% \textit{Profitez!}
%
% \section{Usage Examples}
%
% This section assumes you already have the |texassert| package installed, for instance,
% via |l3build install| (under the \href{https://github.com/hansonchar/texassert}{project}'s root folder).
%
% \subsection{Length Assertions}
% To unit test the |\lengthof| macro in this library, for example, we can
%   create a file |length-tests.tex| with something like:\par
%
% \medskip\noindent
% |    % Import the necessary macros|\hfil\break
% |    \input import \import{lengthof} \import{assert}|\par
% \medskip\noindent
% |    % Length of an empty string is zero|\hfil\break
% |    \lengthof{} \asserteq\the\length=0|\par
% \medskip\noindent
% |    % Length of `0' is one|\hfil\break
% |    \lengthof{0} \asserteq\the\length=1|\par
% \medskip\noindent
% |    % Length of `12.3456' is seven|\hfil\break
% |    \lengthof{12.3456} \asserteq\the\length=7|\par
% \medskip\noindent
% |    % Summary of the assertions made so far|\hfil\break
% |    \assertionsummary|\hfil\break
% |    \bye|\par
% \medskip
% \noindent Compile it with a \TeX\ engine, e.g. |pdftex length-tests.tex|,
% we get an output file |length-tests.pdf| with something like:\par
% \medbreak
% Assertion Summary: 3/3 assertions passed i.e. 0/3 assertions failed.
%
% \subsection{(More Examples ...)}
% TODO
%
% \section{Source Repository}
% \href{https://github.com/hansonchar/texassert}{\texttt{https://github.com/hansonchar/texassert}}
%
% \section{Useful Resources}
% Not so much related to the library provided by this package per se, but some commands and external resources which
% I found directly useful or necesssary for the purpose of \textit{constructing} this package per se.
%
% \begin{enumerate}
%   \item \href{https://github.com/latex3/l3build/tree/main/examples}{Examples} in the
%         \href{https://github.com/latex3/l3build}{|l3build|} repository.
%         The \href{https://github.com/latex3/l3build/tree/main/examples/Simple-Tree}{|simple-tree|} example
%         \hfil\break in particular.
%   \item |texdoc l3build| -- information directly related to |l3build|.
%   \item |texdoc doc| -- the |doc| package used by |l3build| implicitly.
%   \item |texdoc docstrip| -- the |docstrip| package used by |l3build| implicitly.
%   \item |texdoc source2e| -- information related to various macros that are or can be used in a |.dtx| file.
%   \item |texdoc dtxtut| -- Scott Pakin. \textit{How to Package Your \LaTeX\ Package.} January~21,~2024.
%         (I had lots of \textit{Aha!} moments in reading this.)
%   \item Michel Gossens, Frank Mittelbach, and Alexander Samarin.
%         \textit{The \LaTeX\ Companion.}
%         Addison Wesley, Reading, Massachusetts, October~1,~1994. ISBN~0-201-54199-8.
% \end{enumerate}
%
%^^A The package’s source code is delineated by putting it between
%^^A \MaybeStop and \Finale.
% \MaybeStop{\PrintIndex \PrintChanges}
%^^A \StopEventually is deprecated by \MaybeStop
% \section{Implementation}
%^^A %%%%% import.tex %%%%%
% \iffalse
%<*macro:import>\fi
% \begin{macro}{import.tex}
%   Contains |\import|.
%   \begin{macro}{\import}
% Used to prevent the same file from being |\input| more than once.
%    \begin{macrocode}
\def\import#1{%
  \expandafter\ifx\csname import:#1\endcsname\relax
    \input #1
    \expandafter\gdef\csname import:#1\endcsname{}%
    % Imported #1\par
  \fi
}
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \iffalse
%</macro:import>\fi
%^^A %%%%% common.tex %%%%%
% \iffalse
%<*macro:common>\fi
% \begin{macro}{common.tex}
% Contains common code and configuration used in this library.
%    \begin{macrocode}
\showboxdepth=\maxdimen \showboxbreadth=\maxdimen

\newtoks\result \newtoks\tokstemp
\newcount\n
\newcount\integer

\def\true{\let\bool=\iftrue}
\def\false{\let\bool=\iffalse}
%    \end{macrocode}
%
%   \begin{macro}{\debug}
%     Writes a line of debug message immediately to the terminal and the log file
%     when debugging is enabled (via |\debugtrue| which is the default).
%    \begin{macrocode}
\newif\ifdebug
\debugtrue
\def\debug#1{\ifdebug \immediate\write16{[DEBUG] #1}\fi}
%    \end{macrocode}
%   \end{macro}
%
%   \begin{macro}{\ifEmpty}
%     Checks if the given parameter is empty.
%    \begin{macrocode}
\newif\ifempty
\def\checkifempty#1{{\expandafter\def\expandafter\input\expandafter{#1}%
  \global\ifx\input\empty \emptytrue\else\emptyfalse\fi}}

% Assigning \iffalse to \then and use as a parameter delimiter
% is critical in making the if-macros skippable.
% Source: https://tug.org/TUGboat/tb45-1/tb139wermuth-isint.pdf
\let\then=\iffalse
\def\ifEmpty#1\then{%
  \checkifempty{#1}\ifempty
}
%    \end{macrocode}
%   \end{macro}
%
%   \begin{macro}{\ifUndefined}
%     Checks if the given control sequence is undefined.
%    \begin{macrocode}
\long\def\ifUndefined#1\then{{%
  \edef\x{\meaning#1}%
  \let\e=\escapechar \escapechar=-1
  \edef\y{\string\undefined}\escapechar=\e
  \def\true{\iftrue}\def\false{\iffalse}%
  \def\next{\expandafter\expandafter\expandafter
    \aftergroup\ifx\x\y\true\else\false\fi}\next}}
%    \end{macrocode}
%   \end{macro}
%
%   \begin{macro}{\ifDefined}
%     Checks if the given control sequence is defined.
%    \begin{macrocode}
\long\def\not#1#2\then{#1#2\then \false \else \true \fi \bool}
\long\def\ifDefined#1\then{\ifUndefined#1\then
  \false \else \true\fi \bool}
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \iffalse
%</macro:common>\fi
%^^A %%%%% lengthof.tex %%%%%
% \iffalse
%<*macro:lengthof>\fi
% \begin{macro}{lengthof.tex}
%   Contains the code used to find out the length of a given string.
%   \begin{macro}{\lengthof}
%     Computes the length of the given string parameter.
%    \begin{macrocode}
\input import \import{common}

\newcount\length
\chardef\temp=\catcode`@\catcode`@=11

\def\lengthof#1{\length=0 %
  \bgroup
    \edef\lengthof@input{#1}%
    \ifEmpty\lengthof@input\then
      \let\next=\relax
    \else
      \def\next{\expandafter\lengthofA\lengthof@input\eot}%
    \fi
    \next
  \egroup
}
\def\lengthofA#1#2\eot{\global\advance\length by1
  \ifEmpty#2\then
    \let\next=\relax
  \else
    \def\next{\lengthofA#2\eot}%
  \fi
  \next
}

\catcode`@=\temp % restore the original catcode for @
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \iffalse
%</macro:lengthof>\fi
%^^A %%%%% checkeq.tex %%%%%
% \iffalse
%<*macro:checkeq>\fi
% \begin{macro}{checkeq.tex}
%   Contains the code used to check if two given strings are equal.
%   \begin{macro}{\checkeq}
%     Used to check if two given strings are equal.
%     Assume no space in the strings.
%    \begin{macrocode}
\input import \import{lengthof}

\newif\ifeq
\chardef\temp=\catcode`@\catcode`@=11

\global\eqtrue
% Assume no spaces
\def\checkeq#1#2{{%
  \edef\checkeq@fstparam{#1}%
  \edef\checkeq@sndparam{#2}%
  \lengthof\checkeq@fstparam \edef\lena{\number\length}%
  \lengthof\checkeq@sndparam \edef\lenb{\number\length}%
  \ifx\lena\lenb
    \ifnum\length=0
      \global\eqtrue \let\next=\relax
    \else
      \expandafter\expandafter\expandafter
        \def\expandafter\expandafter\expandafter
          \next\expandafter\expandafter\expandafter
            {\expandafter\expandafter\expandafter
              \checkeqA\expandafter\checkeq@fstparam
                \expandafter\eot\checkeq@sndparam\eot}%
    \fi
  \else
    \global\eqfalse \let\next=\relax
  \fi
  \next
}}
\def\checkeqA#1#2\eot#3#4\eot{%
  \if#1#3{}% the trailing `{}%' is necessary to avoid
    \ifx\relax#2\relax % extra spaces
      \global\eqtrue \let\next=\relax
    \else
      \def\next{\checkeqA#2\eot#4\eot}%
    \fi
  \else
    \global\eqfalse \let\next=\relax
  \fi
  \next
}

\catcode`@=\temp % restore the original catcode for @
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \iffalse
%</macro:checkeq>\fi
%^^A %%%%% assert.tex %%%%%
% \iffalse
%<*macro:assert>\fi
% \begin{macro}{assert.tex}
%   Contains the code used for assertion purposes.
%    \begin{macrocode}
\input import \import{checkeq}

\ifDefined\ProvidesPackage\then
  \ProvidesPackage{texassert}
\fi

\newcount\countassertions
\newcount\countassertionspassed
\newcount\countassertionsfailed
\newif\ifassertmessageonly
\chardef\temp=\catcode`@\catcode`@=11

\let\assertDone=\iffalse
\def\unexpected{\toks0={unexpected!}}
\def\expected{\toks0={expected}}
\def\assert{\asserteq\the\toks0={expected}}
\def\assertTrue#1\assertDone{#1\then \expected
  \else \unexpected\fi \assert}
\def\assertFalse#1\assertDone{#1\then \unexpected
  \else \expected\fi \assert}

\def\resetassertions{%
  \countassertions=0
  \countassertionspassed=0
  \countassertionsfailed=0
}
%    \end{macrocode}
%   \begin{macro}{\asserteq}
%     Asserts that the two given string are equal, taking catcode into account.
%    \begin{macrocode}
\def\asserteq#1=#2{{%
  \global\advance\countassertions by1
  \edef\assert@a{#1}%
  % \message{assert@a: [\meaning\assert@a]}%
  \edef\assert@b{#2}%
  % \message{assert@b: [\meaning\assert@b]}%
  \ifx\assert@a\assert@b\relax\relax
    \global\advance\countassertionspassed by1
  \else
    \global\advance\countassertionsfailed by1
    \message{...}%
    \def\errmsg{*** assertion (\the\countassertions) failure:
      `#1' not equal `#2' ***}%
    \message{\errmsg}%
    \ifassertmessageonly\else
      \medbreak
      \indent\indent{\errmsg}%
      \medbreak\fi
  \fi
}}
%    \end{macrocode}
%   \end{macro}
%   \begin{macro}{\asserteqnocat}
%     Asserts that the two given string are equal, disregarding any catcode differences.
%    \begin{macrocode}
\def\asserteqnocat#1=#2{{%
  \global\advance\countassertions by1
  \edef\assert@a{#1}%
  % \message{assert@a: [\meaning\assert@a]}%
  \edef\assert@b{#2}%
  % \message{assert@b: [\meaning\assert@b]}%
  \checkeq\assert@a\assert@b
  \ifeq
    \global\advance\countassertionspassed by1
  \else
    \global\advance\countassertionsfailed by1
    \message{...}%
    \def\errmsg{*** assertion (\the\countassertions) failure:
      `#1' not equal `#2' ***}%
    \message{\errmsg}%
    \ifassertmessageonly\else
      \medbreak
      \indent\indent{\errmsg}%
      \medbreak\fi
  \fi
}}
%    \end{macrocode}
%   \end{macro}
%   \begin{macro}{\assertneq}
%     Asserts that the two given string are not equal, taking catcode into account.
%    \begin{macrocode}
\def\assertneq#1=#2{{%
  \global\advance\countassertions by1
  \edef\assert@a{#1}%
  % \message{assert@a: [\meaning\assert@a]}%
  \edef\assert@b{#2}%
  % \message{assert@b: [\meaning\assert@b]}%
  \ifx\assert@a\assert@b\relax\relax
    \global\advance\countassertionsfailed by1
      \message{...}%
      \def\errmsg{*** assertion (\the\countassertions) failure:
        `#1' equal `#2' ***}%
      \message{\errmsg}%
      \ifassertmessageonly\else
        \medbreak
        \indent\indent{\errmsg}%
        \medbreak\fi
  \else
    \global\advance\countassertionspassed by1
  \fi
}}
%    \end{macrocode}
%   \end{macro}
%   \begin{macro}{\assertionsummary}
%     Typesets a summary of the assertions made.
%     Then reset to a state as if no assertion has been made.
%    \begin{macrocode}
\def\assertionsummary{{%
  \def\sp{ }%
  \def\summary{%
    Assertion Summary:
      \the\countassertionspassed/\the\countassertions\sp
      assertions passed i.e.
    \the\countassertionsfailed/\the\countassertions\sp
      assertions failed.}%
  \message{\summary}%
  \ifassertmessageonly\else
    \medbreak
    \summary
  \fi}\resetassertions}

\catcode`@=\temp % restore the original catcode for @
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \iffalse
%</macro:assert>\fi
%^^A %%%%% texassert.sty %%%%%
% \iffalse
%<*pkg>\fi
% \begin{macro}{texassert.sty}Used for packaging purposes.
%    \begin{macrocode}
\input{assert}
%    \end{macrocode}
% \end{macro}
% \iffalse
%</pkg>\fi
%
% \Finale

